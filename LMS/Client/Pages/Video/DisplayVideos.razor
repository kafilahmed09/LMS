@page "/Video/Display/{id:int}/{pre:int}/{key:int}"
@using LMS.Shared.Models;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject NavigationManager Navigate
@inject HttpClient Http
<h1>List of Videos</h1>

@if (Videos == null)
{
<div class="spinner"></div>
}
else
{
 <div class="row">
     <div class="col-xs-1 col-sm-1 col-md-1 text-left">
         <a href="/chapter/display/@pre/@key"> <img src="/images/back.png" width="30" /></a>
     </div>
     <div class="col-xs-11 col-sm-11 col-md-11 text-right">
         <button class="btn btn-info" @onclick="CreateVideo">Add Video</button>
     </div>
 </div>
 <div class="table-responsive">
     <table class="table text-left">
         <thead>
             <tr>
                 <th>Video</th>                                
                 <th>Topics</th>                                
             </tr>
         </thead>
         <tbody>
             @foreach (var Video in Videos)
             {
                 <tr>
                     <td>@(String.Concat(Video.Name, "#", Video.SerialNo))</td>                                        
                     <td><button class="btn btn-info" @onclick="( () => ViewTopics(Video.VideoId))">View</button></td>
                     <td><button class="btn btn-info" @onclick="( () => UpdateVideo(Video.VideoId))">Edit</button></td>
                     <td><button class="btn btn-warning" @onclick="( () => DeleteVideo(Video.VideoId))">delete</button></td>
                 </tr>
             }
         </tbody>
     </table>
 </div>
}

@code {
    private IEnumerable<Video> Videos;
    [Parameter] public int Id { get; set; }
    [Parameter] public int key { get; set; }
    [Parameter] public int pre { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Videos = await Http.GetFromJsonAsync<List<Video>>("api/Videos");
            Videos = Videos.Where(a=>a.ChapterId == Id);
        }
        catch(AccessTokenNotAvailableException e)
        {
            e.Redirect();
        }
    }

    public async Task DeleteVideo(int id)
    {
        await Http.DeleteAsync($"api/Videos/{id}");
        Videos = await Http.GetFromJsonAsync<List<Video>>("api/Videos");
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void UpdateVideo(int id)
    {
        Navigate.NavigateTo($"Video/Update/{id}/{Id}/{pre}/{key}");
    }
    public void ViewTopics(int id)
    {
        Navigate.NavigateTo($"Topic/Display/{id}/{Id}/{pre}/{key}");
    }
    public void CreateVideo()
    {
        Navigate.NavigateTo($"Video/Add/{Id}/{pre}/{key}");
    }
}