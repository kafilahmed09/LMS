@page "/Chapter/Display/{id:int}/{key:int}"
@using LMS.Shared.Models;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject NavigationManager Navigate
@inject HttpClient Http
<h1>List of Chapters</h1>

@if (Chapters == null)
{
<div class="spinner"></div>
}
else
{
 <div class="row">
     <div class="col-xs-1 col-sm-1 col-md-1 text-left">
         <a href="/subject/display/@key"> <img src="/images/back.png" width="30" /></a>
     </div>
     <div class="col-xs-11 col-sm-11 col-md-11 text-right">
         <div class="text-right"><button class="btn btn-info" @onclick="CreateChapter">Add Chapter</button></div>
     </div>
 </div>
<div class="table-responsive">
    <table class="table text-left">
        <thead>
            <tr>
                <th>Chapter</th>                
                <th>Videos</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Chapter in Chapters)
            {
                <tr>
                    <td>@Chapter.Name</td>                   
                    <td><button class="btn btn-info" @onclick="( () => ViewVideos(Chapter.ChapterId))">View</button></td>
                    <td><button class="btn btn-info" @onclick="( () => UpdateChapter(Chapter.ChapterId))">Edit</button></td>
                    <td><button class="btn btn-warning" @onclick="( () => DeleteChapter(Chapter.ChapterId))">delete</button></td>
                </tr>
            }
        </tbody>
    </table>
</div>
}

@code {
    private IEnumerable<Chapter> Chapters;
    [Parameter] public int Id { get; set; }
    [Parameter] public int key { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Chapters = await Http.GetFromJsonAsync<List<Chapter>>("api/Chapters");
            Chapters = Chapters.Where(a=>a.SubjectId == Id);
        }
        catch(AccessTokenNotAvailableException e)
        {
            e.Redirect();
        }
    }

    public async Task DeleteChapter(int id)
    {
        await Http.DeleteAsync($"api/Chapters/{id}");
        Chapters = await Http.GetFromJsonAsync<List<Chapter>>("api/Chapters");
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void UpdateChapter(int id)
    {
        Navigate.NavigateTo($"Chapter/Update/{id}");
    }

    public void ViewVideos(int id)
    {
        Navigate.NavigateTo($"Video/Display/{id}/{Id}/{key}");
    }

    public void CreateChapter()
    {
        Navigate.NavigateTo($"Chapter/Add");
    }
}